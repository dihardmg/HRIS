version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: hris-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-hris}
      POSTGRES_USER: ${DB_USERNAME:-hris_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-hris_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - hris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-hris_user} -d ${DB_NAME:-hris}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for rate limiting and caching)
  redis:
    image: redis:7-alpine
    container_name: hris-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-}
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - hris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # HRIS Application (Optional - for full Docker deployment)
  hris-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hris-app
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-hris}
      DB_USERNAME: ${DB_USERNAME:-hris_user}
      DB_PASSWORD: ${DB_PASSWORD:-hris_password}

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Application Configuration
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      SERVER_PORT: ${SERVER_PORT:-8081}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_key_change_in_production}

      # Mail Configuration
      MAIL_HOST: ${MAIL_HOST:-smtp.sendgrid.net}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME:-apikey}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-your_sendgrid_api_key_here}

      # Frontend URL
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}

      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      SECURITY_LOG_LEVEL: ${SECURITY_LOG_LEVEL:-DEBUG}

      # DevTools Secret
      DEVTOOLS_SECRET: ${DEVTOOLS_SECRET:-dev_secret_change_me}
    ports:
      - "${SERVER_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - application

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  hris-network:
    driver: bridge